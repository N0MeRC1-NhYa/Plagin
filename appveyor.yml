
# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master

  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub, Bitbucket, GitLab, Gitea)
skip_tags: true

# Start builds on tags only (GitHub, BitBucket, GitLab, Gitea)
skip_non_tags: true

# Skipping commits with particular message or from specific user
                                 

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# clone directory
clone_folder: c:\projects\Plagin

# fetch repository as zip archive
shallow_clone: true                 # default is "false"

# set clone depth
clone_depth: 5                      # clone entire repository history if not defined

# setting up etc\hosts file



# .NET Core `*.*proj` files patching:
dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '{version}'
  version_prefix: '{version}'
  package_version: '{version}'
  assembly_version: '{version}'
  file_version: '{version}'
  informational_version: '{version}'
#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Any CPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
  parallel: true                  # enable MSBuild parallel builds
  project: Plagin.sln      # path to Visual Studio solution or project
  publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
  publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
  publish_wap_beanstalk: true     # Package Web Applications for AWS Elastic Beanstalk deployment
  publish_wap_octopus: true       # Package Web Applications for Octopus deployment
  publish_azure_webjob: true      # Package Azure WebJobs for Zip Push deployment
  publish_azure: true             # package Azure Cloud Service projects and push to artifacts
  publish_aspnet_core: true       # Package ASP.NET Core projects
  publish_core_console: true      # Package .NET Core console projects
  publish_nuget: true             # package projects with .nuspec files and push to artifacts
  publish_nuget_symbols: true     # generate and publish NuGet symbol packages
  include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

  # MSBuild verbosity level
  verbosity: normal




#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
deploy:

    # FTP deployment provider settings
  - provider: FTP
    protocol: ftp|ftps|sftp
    host: ftp.myserver.com
    username: admin
    password:
      secure: eYKZKFkkEvFYWX6NfjZIVw==
    folder:
    application:
    active_mode: false
    beta: true      # enable alternative FTP library for 'ftp' and 'ftps' modes
    debug: true     # show complete FTP log

    # Amazon S3 deployment provider settings
  - provider: S3
    access_key_id:
      secure: ABcd==
    secret_access_key:
      secure: ABcd==
    bucket: my_bucket
    folder:
    artifact:
    set_public: false

    # Azure Blob storage deployment provider settings
  - provider: AzureBlob
    storage_account_name:
      secure: ABcd==
    storage_access_key:
      secure: ABcd==
    container: my_container
    folder:
    artifact:

    # Web Deploy deployment provider settings
  - provider: WebDeploy
    server: http://www.deploy.com/myendpoint
    website: mywebsite
    username: user
    password:
      secure: eYKZKFkkEvFYWX6NfjZIVw==
    ntlm: false
    remove_files: false
    app_offline: false
    do_not_use_checksum: true           # do not use check sum for comparing source and destination files. By default checksums are used.
    sync_retry_attempts: 2              # sync attempts, max
    sync_retry_interval: 2000           # timeout between sync attempts, milliseconds
    aspnet_core: true                   # artifact zip contains ASP.NET Core application
    aspnet_core_force_restart: true     # poke app's web.config before deploy to force application restart
    skip_dirs: \\App_Data
    skip_files: web.config
    on:
      branch: release
      platform: x86
      configuration: debug

    # Deploying to Azure Cloud Service
  - provider: AzureCS
    subscription_id:
      secure: fjZIVw==
    subscription_certificate:
      secure: eYKZKFkkEv...FYWX6NfjZIVw==
    storage_account_name: my_storage
    storage_access_key:
      secure: ABcd==
    service: my_service
    slot: Production
    target_profile: Cloud
    artifact: MyPackage.cspkg

    # Deploying to NuGet feed
  - provider: NuGet
    server: https://my.nuget.server/feed
    api_key:
      secure: FYWX6NfjZIVw==
    skip_symbols: false
    symbol_server: https://your.symbol.server/feed
    artifact: MyPackage.nupkg

    # Deploy to GitHub Releases
  - provider: GitHub
    artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
    draft: false
    prerelease: false
    on:
      branch: master                # release from master branch only
      APPVEYOR_REPO_TAG: true       # deploy on tag push only

    # Deploying to a named environment
  - provider: Environment
    name: staging
    on:
      branch: staging
      env_var1: value1
      env_var2: value2

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off

